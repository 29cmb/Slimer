const player = "p"
const goal = "g"
const winnertext = "w"
const wall = "a"

const bkey = "b"
const rkey = "r"
const gkey = "k"

const bkeyDoor = "d"
const rkeyDoor = "s"
const gkeyDoor = "q"

const obstacles = [wall, bkeyDoor, rkeyDoor, gkeyDoor]

setLegend(
  [ player, bitmap`
....77777777....
...7........7...
..7..........7..
..7..........7..
..7........0.7..
..7..........7..
.77..........77.
.7............7.
.7............7.
.7...........07.
.7..........007.
.7.0.......00.7.
77........00..77
7......0000....7
7..............7
7777777777777777`],
  [ goal,  bitmap`
....66666666....
...6666666666...
..666444444666..
.66444444444466.
6664444444444666
6644444444444466
6644444444444466
6644444444444466
6644444444444466
6644444444444466
6644444444444466
6664444444444666
.66444444444466.
..666444444666..
...6666666666...
....66666666....`], 
  [ winnertext, bitmap`
................
.0.....0........
.0.....0.0......
.0.....0...000..
.0..0..0.0.0.0..
..00.00..0.0.0..
................
................
................
................
................
................
................
................
................
................`],
  [ wall, bitmap`
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF`],
  [ bkey, bitmap`
................
................
................
................
................
..........777...
.........7...7..
..77777777...7..
..7...7..7...7..
..7...7...777...
................
................
................
................
................
................`],
  [ rkey, bitmap`
................
................
................
................
................
..........333...
.........3...3..
..33333333...3..
..3...3..3...3..
..3...3...333...
................
................
................
................
................
................`],
  [ gkey, bitmap`
................
................
................
................
................
..........444...
.........4...4..
..44444444...4..
..4...4..4...4..
..4...4...444...
................
................
................
................
................
................`],
  [ bkeyDoor, bitmap`
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...
...7777777777...`],
  [ rkeyDoor, bitmap`
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...
...3333333333...`],
  [ gkeyDoor, bitmap`
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...
...4444444444...`]
)

setSolids([wall, ...obstacles])

let level = 0
const levels = [
  map`
.....
.....
p...g
.....`,
  map`
....g.
......
p.....
......
......`,
  map`
.......
.......
...a...
...a...
...a...
p..a.g.`,
  map`
.....ag.
aaa..aa.
....aa..
.a.aa...
pa......`,
  map`
.b..d...
....d...
....d...
....d...
....d...
p...d..g`,
map`
rd...q.s.
.d...q.s.
.d..kq.s.
.d...q.s.
.d...q.s.
.d...q.s.
.d.p.qbsg`,
]

const win = map`
.w.
.p.
...`


setMap(levels[level])

setPushables({
  [ player ]: []
})

onInput("w", () => movePlayer(0, -1))
onInput("s", () => movePlayer(0, 1))
onInput("a", () => movePlayer(-1, 0))
onInput("d", () => movePlayer(1, 0))

afterInput(() =>{
  if(!getFirst(player) || !getFirst(goal)) return;
  if(getFirst(player).x === getFirst(goal).x && getFirst(player).y == getFirst(goal).y){
    level++
    if (level < levels.length) {
      setMap(levels[level])
    } else {
      setMap(win)
    }
  }
})

function movePlayer(dx, dy) {
    const playerSprite = getFirst(player)
    const targetX = playerSprite.x + dx
    const targetY = playerSprite.y + dy
    
    if (!isObstacle(targetX, targetY)) {
      playerSprite.x = targetX
      playerSprite.y = targetY
  
      const blueKey = getTile(targetX, targetY).find(sprite => sprite.type === bkey)
      const redKey = getTile(targetX, targetY).find(sprite => sprite.type === rkey)
      const greenKey = getTile(targetX, targetY).find(sprite => sprite.type == gkey)

      if (blueKey) {
        blueKey.remove()

        getAll(bkeyDoor).forEach(door => {
          door.remove()
        })
      }

      if (redKey) {
        redKey.remove()

        getAll(rkeyDoor).forEach(door => {
          door.remove()
        })
      }

      if (greenKey){
        greenKey.remove()

        getAll(gkeyDoor).forEach(door => {
          door.remove()
        })
      }
    }
  }
  

function isObstacle(x, y) {
  return getTile(x, y).some(sprite => obstacles.includes(sprite.type))
}